package tbdex.sdk.httpclient

import org.junit.jupiter.api.Disabled
import tbdex.sdk.httpclient.models.ErrorResponse
import tbdex.sdk.httpclient.models.GetOfferingsResponse
import tbdex.sdk.protocol.models.*
import kotlin.test.Test

class YellowCardTest {
  @Suppress("MaximumLineLength")
  private val ionDid =
    "did:ion:EiDCYKaMtz8hWnylrPKaDsOqNoM973GWqfGCUIeLQesWcg:eyJkZWx0YSI6eyJwYXRjaGVzIjpbeyJhY3Rpb24iOiJyZXBsYWNlIiwiZG9jdW1lbnQiOnsicHVibGljS2V5cyI6W3siaWQiOiJkd24tc2lnIiwicHVibGljS2V5SndrIjp7ImNydiI6IkVkMjU1MTkiLCJrdHkiOiJPS1AiLCJ4IjoidGdXWUF3ajlSRkhXaEJON2Fya0pnQTJKSUlDbHg2Zm54cjVjeE9jNm95SSJ9LCJwdXJwb3NlcyI6WyJhdXRoZW50aWNhdGlvbiJdLCJ0eXBlIjoiSnNvbldlYktleTIwMjAifV0sInNlcnZpY2VzIjpbeyJpZCI6InBmaSIsInNlcnZpY2VFbmRwb2ludCI6Imh0dHBzOi8vcGZpLnllbGxvd2NhcmQuZW5naW5lZXJpbmciLCJ0eXBlIjoiUEZJIn1dfX1dLCJ1cGRhdGVDb21taXRtZW50IjoiRWlCSk9ha3M4WmI2LXJueDdzMERnWnZqel9YS3NfUEJoN3BTcUgycUQzMXphQSJ9LCJzdWZmaXhEYXRhIjp7ImRlbHRhSGFzaCI6IkVpQWQxRTRSWVBEdlUtTUNlZnY3cUZUOEszaTVZcjNrZ3BnOWhiSkhsWXg0ZnciLCJyZWNvdmVyeUNvbW1pdG1lbnQiOiJFaUNXYzVzekFiWUpsMzVWci1Sdzl6ZE1hWDNlaGZPQUlBUHhEVnhsY3NjWWZBIn19"

  @Suppress("MaximumLineLength")
  private val claim =
    "eyJraWQiOiJkaWQ6aW9uOkVpRDZKY3dycWI1bEZMRld5VzU5dUxpem81bEJ1Q2hpZWlxdGQwVEZOMHhzbmc6ZXlKa1pXeDBZU0k2ZXlKd1lYUmphR1Z6SWpwYmV5SmhZM1JwYjI0aU9pSnlaWEJzWVdObElpd2laRzlqZFcxbGJuUWlPbnNpY0hWaWJHbGpTMlY1Y3lJNlczc2lhV1FpT2lKNmNDMW1ObkZNVFcxRWF6WkNOREZxVEZoSVh5MWtkMHhPTFc5RFMybFRjREphYTE5V1EydDRYM1pGSWl3aWNIVmliR2xqUzJWNVNuZHJJanA3SW1OeWRpSTZJbk5sWTNBeU5UWnJNU0lzSW10MGVTSTZJa1ZESWl3aWVDSTZJak5tVkZrM1ZYcEJhVTlWTlZwR1owNVZWamwzYm01cGRFdEdRazUxUmtOUExXeGxSWEJEVnpoSE9ITWlMQ0o1SWpvaWRqSm9ObFJxVERGMFRuWXdTRE5XYjA5RmJsbDBVVkJ4UkhaT1ZDMHdiVmRaVVVkTFRHUlNha0ozYXlKOUxDSndkWEp3YjNObGN5STZXeUpoZFhSb1pXNTBhV05oZEdsdmJpSmRMQ0owZVhCbElqb2lTbk52YmxkbFlrdGxlVEl3TWpBaWZWMHNJbk5sY25acFkyVnpJanBiWFgxOVhTd2lkWEJrWVhSbFEyOXRiV2wwYldWdWRDSTZJa1ZwUWprM1NUSTJibVV3ZGtoWFlYZHVPRGsxWTFkblZsRTBjRkY1Tm1OMU9VRmxTelYyYVc0NFgzSlZlWGNpZlN3aWMzVm1abWw0UkdGMFlTSTZleUprWld4MFlVaGhjMmdpT2lKRmFVUnFTbWxFZG05UmVrc3RSbDk0VjA1VlZ6bHpNVEJVVm1scGRFSTBaMUpvUzA5aVlsaDJTMXB3ZGxOUklpd2ljbVZqYjNabGNubERiMjF0YVhSdFpXNTBJam9pUldsQ2JFazFOV3g2YjNKb2VFNDJUVkJxVWxadFYyWlpZM014TnpOS09GazNTMGhUZVU1TGNtWmlUelZmZHlKOWZRI3pwLWY2cUxNbURrNkI0MWpMWEhfLWR3TE4tb0NLaVNwMlprX1ZDa3hfdkUiLCJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJzdWIiOiJkaWQ6a2V5Ono2TWtqeVM2R0IxWTZvMVlqU1JLTWc3dVZ3clFaRmhRTkJOOEhCSHVwa3U3Q2ZSRSIsIm5iZiI6MTY5NDY1NDY1NiwiaXNzIjoiZGlkOmlvbjpFaUQ2SmN3cnFiNWxGTEZXeVc1OXVMaXpvNWxCdUNoaWVpcXRkMFRGTjB4c25nOmV5SmtaV3gwWVNJNmV5SndZWFJqYUdWeklqcGJleUpoWTNScGIyNGlPaUp5WlhCc1lXTmxJaXdpWkc5amRXMWxiblFpT25zaWNIVmliR2xqUzJWNWN5STZXM3NpYVdRaU9pSjZjQzFtTm5GTVRXMUVhelpDTkRGcVRGaElYeTFrZDB4T0xXOURTMmxUY0RKYWExOVdRMnQ0WDNaRklpd2ljSFZpYkdsalMyVjVTbmRySWpwN0ltTnlkaUk2SW5ObFkzQXlOVFpyTVNJc0ltdDBlU0k2SWtWRElpd2llQ0k2SWpObVZGazNWWHBCYVU5Vk5WcEdaMDVWVmpsM2JtNXBkRXRHUWs1MVJrTlBMV3hsUlhCRFZ6aEhPSE1pTENKNUlqb2lkakpvTmxScVRERjBUbll3U0ROV2IwOUZibGwwVVZCeFJIWk9WQzB3YlZkWlVVZExUR1JTYWtKM2F5SjlMQ0p3ZFhKd2IzTmxjeUk2V3lKaGRYUm9aVzUwYVdOaGRHbHZiaUpkTENKMGVYQmxJam9pU25OdmJsZGxZa3RsZVRJd01qQWlmVjBzSW5ObGNuWnBZMlZ6SWpwYlhYMTlYU3dpZFhCa1lYUmxRMjl0YldsMGJXVnVkQ0k2SWtWcFFqazNTVEkyYm1Vd2RraFhZWGR1T0RrMVkxZG5WbEUwY0ZGNU5tTjFPVUZsU3pWMmFXNDRYM0pWZVhjaWZTd2ljM1ZtWm1sNFJHRjBZU0k2ZXlKa1pXeDBZVWhoYzJnaU9pSkZhVVJxU21sRWRtOVJla3N0Umw5NFYwNVZWemx6TVRCVVZtbHBkRUkwWjFKb1MwOWlZbGgyUzFwd2RsTlJJaXdpY21WamIzWmxjbmxEYjIxdGFYUnRaVzUwSWpvaVJXbENiRWsxTld4NmIzSm9lRTQyVFZCcVVsWnRWMlpaWTNNeE56TktPRmszUzBoVGVVNUxjbVppVHpWZmR5SjlmUSIsImV4cCI6MTcyNjI3NzA1NiwiaWF0IjoxNjk0NjU0NjU2LCJub25jZSI6ImNjMTAxMjA5LWNhNTktNGE2MS04ZTNlLTI4MWIxYjVlMGIyNCIsInZjIjp7IkBjb250ZXh0IjpbImh0dHBzOi8vd3d3LnczLm9yZy8yMDE4L2NyZWRlbnRpYWxzL3YxIl0sImlkIjoiNGI1OGI2ZWEtMjhmNC00Zjc0LWEwMWEtNGFmNjNmZmUyMTk3IiwidHlwZSI6WyJWZXJpZmlhYmxlQ3JlZGVudGlhbCIsIlNhbmN0aW9uQ3JlZGVudGlhbCJdLCJpc3N1ZXIiOiJkaWQ6aW9uOkVpRDZKY3dycWI1bEZMRld5VzU5dUxpem81bEJ1Q2hpZWlxdGQwVEZOMHhzbmc6ZXlKa1pXeDBZU0k2ZXlKd1lYUmphR1Z6SWpwYmV5SmhZM1JwYjI0aU9pSnlaWEJzWVdObElpd2laRzlqZFcxbGJuUWlPbnNpY0hWaWJHbGpTMlY1Y3lJNlczc2lhV1FpT2lKNmNDMW1ObkZNVFcxRWF6WkNOREZxVEZoSVh5MWtkMHhPTFc5RFMybFRjREphYTE5V1EydDRYM1pGSWl3aWNIVmliR2xqUzJWNVNuZHJJanA3SW1OeWRpSTZJbk5sWTNBeU5UWnJNU0lzSW10MGVTSTZJa1ZESWl3aWVDSTZJak5tVkZrM1ZYcEJhVTlWTlZwR1owNVZWamwzYm01cGRFdEdRazUxUmtOUExXeGxSWEJEVnpoSE9ITWlMQ0o1SWpvaWRqSm9ObFJxVERGMFRuWXdTRE5XYjA5RmJsbDBVVkJ4UkhaT1ZDMHdiVmRaVVVkTFRHUlNha0ozYXlKOUxDSndkWEp3YjNObGN5STZXeUpoZFhSb1pXNTBhV05oZEdsdmJpSmRMQ0owZVhCbElqb2lTbk52YmxkbFlrdGxlVEl3TWpBaWZWMHNJbk5sY25acFkyVnpJanBiWFgxOVhTd2lkWEJrWVhSbFEyOXRiV2wwYldWdWRDSTZJa1ZwUWprM1NUSTJibVV3ZGtoWFlYZHVPRGsxWTFkblZsRTBjRkY1Tm1OMU9VRmxTelYyYVc0NFgzSlZlWGNpZlN3aWMzVm1abWw0UkdGMFlTSTZleUprWld4MFlVaGhjMmdpT2lKRmFVUnFTbWxFZG05UmVrc3RSbDk0VjA1VlZ6bHpNVEJVVm1scGRFSTBaMUpvUzA5aVlsaDJTMXB3ZGxOUklpd2ljbVZqYjNabGNubERiMjF0YVhSdFpXNTBJam9pUldsQ2JFazFOV3g2YjNKb2VFNDJUVkJxVWxadFYyWlpZM014TnpOS09GazNTMGhUZVU1TGNtWmlUelZmZHlKOWZRIiwiaXNzdWFuY2VEYXRlIjoiMjAyMy0wOS0xNFQwMToyNDoxNloiLCJleHBpcmF0aW9uRGF0ZSI6IjIwMjQtMDktMTRUMDE6MjQ6MTZaIiwiY3JlZGVudGlhbFN1YmplY3QiOnsiaWQiOiJkaWQ6a2V5Ono2TWtqeVM2R0IxWTZvMVlqU1JLTWc3dVZ3clFaRmhRTkJOOEhCSHVwa3U3Q2ZSRSIsInN1YmplY3QiOnsiZnVsbE5hbWUiOiJKaXlvb24gS29vIiwiY291bnRyeSI6IlVTIn0sInNjcmVlbmluZyI6eyJ2ZW5kb3IiOiJDYXN0ZWxsdW0iLCJ3YXRjaExpc3RzIjpbIkNhbmFkYSBQdWJsaWMgU2FmZXR5IiwiQ2FuYWRhIFJDTVAiLCJDYW5hZGEgU0VNQSIsIkNhbmFkYSBVbml0ZWQgTmF0aW9ucyBBY3QiLCJFVSBTYW5jdGlvbnMiLCJVSyBITVQgT0ZTSSIsIlVOIFNhbmN0aW9ucyIsIlVTIEZpbmNlbiAzMTEgQWN0aW9ucyIsIlVTIE9GQUMgTm9uLVNETiIsIlVTIE9GQUMgU0ROIiwiVVMgT0ZBQyBTU0kiLCJVUyBTdGF0ZSBEZXBhcnRtZW50IEN1YmEgUmVzdHJpY3RlZCBMaXN0IiwiVVMgU3RhdGUgRGVwYXJ0bWVudCBUZXJyb3Jpc3QgRXhjbHVzaW9uIl0sImNhZGVuY2UiOiJEYWlseSIsImZ1enp5TG9naWNQYXJhbWV0ZXIiOiI4NSUiLCJzY3JlZW5pbmdSZXN1bHQiOiJOb19NYXRjaCJ9fX0sImp0aSI6IjRiNThiNmVhLTI4ZjQtNGY3NC1hMDFhLTRhZjYzZmZlMjE5NyJ9.4DRidq61zOsDSWVMNVS10k4HBpjn7kqeV_XYOshYmyYcSHWH3or1gDjgbjTjF_DsfwrGPBWohf9L2xH7as3FkA"

  @Test
//  @Disabled
  fun `can get offerings`() {
    val resp = RealTbdexClient.getOfferings(ionDid) as GetOfferingsResponse
    // TODO assert response
  }

  @Test
//  @Disabled
  fun `can send an RFQ`() {
    val resp = RealTbdexClient.getOfferings(ionDid) as GetOfferingsResponse
    val offering = resp.data[2] as Offering
    val message = Rfq.create(
      to = ionDid,
      from = TestData.ALICE_DID.uri,
      rfqData = RfqData(
        offeringId = offering.metadata.id,
        payinSubunits = "200",
        payinMethod = SelectedPaymentMethod(kind = "KES_ADDRESS", paymentDetails = mapOf()),
        payoutMethod = SelectedPaymentMethod("MOMO_MPESA", paymentDetails = mapOf()),
        claims = listOf(claim)
      )
    )
    message.sign(TestData.ALICE_DID)
    val parsed = Message.parse(message.toString())
    val rfqResp = RealTbdexClient.sendMessage(message) as ErrorResponse
    println(rfqResp.errors.toString())
    // TODO assert response
  }

  @Test
  @Disabled
  fun `can get an exchange`() {
    // create an rfq
    // get the exchange
    TODO()
  }
}